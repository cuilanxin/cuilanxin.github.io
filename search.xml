<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>deepin 开发环境</title>
      <link href="/2024/01/01/configure/deepin/"/>
      <url>/2024/01/01/configure/deepin/</url>
      
        <content type="html"><![CDATA[<h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><h3 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1. 安装git"></a>1. 安装git</h3><pre><code class="bash">$ sudo apt install git</code></pre><h3 id="2-安装chrome"><a href="#2-安装chrome" class="headerlink" title="2. 安装chrome"></a>2. 安装chrome</h3><ol><li>去谷歌浏览器官网下载 </li></ol><pre><code class="bash">$ sudo dpkg -i 下载的deb包</code></pre><h3 id="3-安装node"><a href="#3-安装node" class="headerlink" title="3. 安装node"></a>3. 安装node</h3><ol><li>去node官网下载压缩包</li></ol><pre><code class="bash">$ tar -xf 压缩包$ sudo mv 解压的的文件 /opt/node$ sudo vi /etc/profile </code></pre><p>末行追加环境变量</p><pre><code class="text">export NODE_HOME=/opt/nodeexport PATH=$PATH:$NODE_HOME/binexport NODE_PATH=$NODE_HOME/lib/node_mudules</code></pre><pre><code class="bash">$ sudo source /etc/profile$$ # 创建软连接$ sudo ln -s /opt/node/bin/node /usr/local/bin/node$ sudo ln -s /opt/node/bin/npm /usr/local/bin/npm$ $ # 检查是否成功$ node -v$ npm -v</code></pre><h3 id="双系统时间不一致"><a href="#双系统时间不一致" class="headerlink" title="双系统时间不一致"></a>双系统时间不一致</h3><pre><code class="bash">$ timedatectl set-local-rtc 1</code></pre><h3 id="忽略大小写"><a href="#忽略大小写" class="headerlink" title="忽略大小写"></a>忽略大小写</h3><pre><code class="bash">$ sudo vi /etc/inputrc</code></pre><p>末行追加</p><pre><code class="text">set completion-ignore-case on</code></pre><h3 id="查找历史命令"><a href="#查找历史命令" class="headerlink" title="查找历史命令"></a>查找历史命令</h3><pre><code class="bash">$ sudo vi /etc/profile</code></pre><p>末行追加</p><pre><code class="text">bind &#39;&quot;\e[A&quot;: history-search-backward&#39;bind &#39;&quot;\e[B&quot;: history-search-forward&#39;bind &#39;&quot;\e[5~&quot;: history-search-backward&#39;bind &#39;&quot;\e[6~&quot;: history-search-backward&#39;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git ssh-key</title>
      <link href="/2024/01/01/configure/git%20ssh/"/>
      <url>/2024/01/01/configure/git%20ssh/</url>
      
        <content type="html"><![CDATA[<p>配置git ssh</p><h1 id="配置git-ssh"><a href="#配置git-ssh" class="headerlink" title="配置git ssh"></a>配置git ssh</h1><h3 id="1-下载git"><a href="#1-下载git" class="headerlink" title="1. 下载git"></a>1. 下载git</h3><pre><code class="bash">$ sudo apt install git</code></pre><h3 id="2-设置git-config"><a href="#2-设置git-config" class="headerlink" title="2. 设置git config"></a>2. 设置git config</h3><pre><code class="bash">$ git config --global user.name &quot;xxx&quot;$ git config --global user.email &quot;xxx@.com&quot;</code></pre><h3 id="3-生成key"><a href="#3-生成key" class="headerlink" title="3. 生成key"></a>3. 生成key</h3><ol><li>回车到底</li></ol><pre><code class="bash">$ ssh-keygen -t rsa -C &quot;xxx@.com&quot;</code></pre><h3 id="4-复制生成的-ssh-rsa-pub"><a href="#4-复制生成的-ssh-rsa-pub" class="headerlink" title="4. 复制生成的 ssh-rsa,pub"></a>4. 复制生成的 ssh-rsa,pub</h3><ol><li>复制输出内容</li></ol><pre><code class="bash">$ cat ~/.ssh/id_rsa.pub</code></pre><h3 id="5-配置到git"><a href="#5-配置到git" class="headerlink" title="5. 配置到git"></a>5. 配置到git</h3><ol><li>Setting-》SSH and GPG keys -》SSh keys </li><li>title 随便写 </li><li>ssh 就是刚才复制的 id_rsa.pub 内容</li></ol><h3 id="6-问题"><a href="#6-问题" class="headerlink" title="6. 问题"></a>6. 问题</h3><ol><li>没有权限<ul><li>检查email name 是否正确</li></ul></li><li>查看是否配置成功</li></ol><pre><code class="bash">$ ssh -T git@github.com# Hi user.name! You&#39;ve successfully authenticated, but GitHub does #  not provide shell access.</code></pre><ol start="3"><li>如果没有配置成功尝试一下</li></ol><p>ssh-add命令是把专用密钥添加到ssh-agent的高速缓存中,从而提高ssh的认证速度</p><pre><code class="bash">$ ssh-add ~/.ssh/id_rsa</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript type interface区别</title>
      <link href="/2021/12/18/promote/ts--type-interface%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/12/18/promote/ts--type-interface%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>TypeScript type interface区别</p><h1 id="typescript-type-amp-interface区别"><a href="#typescript-type-amp-interface区别" class="headerlink" title="typescript type &amp; interface区别"></a>typescript type &amp; interface区别</h1><h3 id="官网引文"><a href="#官网引文" class="headerlink" title="官网引文"></a>官网引文</h3><blockquote><p>Type aliases and interfaces are very similar, and in many cases you can choose between them freely. Almost all features of an interface are available in type, the key distinction is that a type cannot be re-opened to add new properties vs an interface which is always extendable.</p><p>百度翻译: 类型别名和接口非常相似，在许多情况下，您可以在它们之间自由选择。接口的几乎所有功能都可以在类型中使用，关键区别在于类型无法重新打开以添加新属性，而接口始终是可扩展的。</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre><code class="ts">interface A &#123;  name: string;&#125;const a: A = &#123; name: &#39;string&#39; &#125;</code></pre><pre><code class="ts">type A = &#123;  name: string;&#125;const a: A = &#123; name: &#39;string&#39; &#125;type B = numberconst b: B = 1;</code></pre><p>**<code style='color: red; opacity: .8'>interface</code> **</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>v2ray 搭建科学上网</title>
      <link href="/2021/11/16/configure/proxy-V2ray/"/>
      <url>/2021/11/16/configure/proxy-V2ray/</url>
      
        <content type="html"><![CDATA[<p>配置科学上网 mac 版</p><h1 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h1><h3 id="1-购买一个服务器"><a href="#1-购买一个服务器" class="headerlink" title="1. 购买一个服务器"></a>1. 购买一个服务器</h3><p><a href="https://racknerd.com/">racknerd 官网</a></p><ol><li>注册账号</li><li>选择适合自己的价位</li><li>选择自己会用的 linux 系统(本文选用 CentOS SELinux 7 x64)</li></ol><h3 id="2-连接服务器"><a href="#2-连接服务器" class="headerlink" title="2. 连接服务器"></a>2. 连接服务器</h3><pre><code class="bash">$ ssh root@服务器IP$ # 输入密码</code></pre><h3 id="3-配置ssr"><a href="#3-配置ssr" class="headerlink" title="3. 配置ssr"></a>3. 配置ssr</h3><p>在进入服务器的终端界面</p><h3 id="4-安装wget"><a href="#4-安装wget" class="headerlink" title="4. 安装wget"></a>4. 安装wget</h3><p>有的不用安装</p><pre><code class="bash">$ sudo yum -y install wget</code></pre><h3 id="5-关闭防火墙"><a href="#5-关闭防火墙" class="headerlink" title="5. 关闭防火墙"></a>5. 关闭防火墙</h3><pre><code class="bash">$ systemctl stop firewalld</code></pre><h3 id="6-安装-v2ray"><a href="#6-安装-v2ray" class="headerlink" title="6. 安装 v2ray"></a>6. 安装 v2ray</h3><pre><code class="bash">$ bash &lt;(curl -s -L https://git.io/v2ray-setup.sh)</code></pre><h3 id="7-v2ray-命令"><a href="#7-v2ray-命令" class="headerlink" title="7. v2ray 命令"></a>7. v2ray 命令</h3><pre><code class="bash">$ v2ray info # 查看 V2Ray 配置信息$ v2ray link # 生成 V2Ray 配置文件链接$ v2ray qr # 生成 V2Ray 配置二维码链接$ v2ray start # 启动 V2Ray$ v2ray stop # 停止 V2Ray$ v2ray restart # 重启 V2Ray$ v2ray config # 配置</code></pre><h3 id="8-下载-ssr-软件"><a href="#8-下载-ssr-软件" class="headerlink" title="8.下载 ssr 软件"></a>8.下载 ssr 软件</h3><p>按照步骤填写服务器信息，就是刚才在买的服务器中搭建的ssr的配置<br><a href="https://github.com/yanue/V2rayU/releases/tag/3.2.0">mac v2rayU</a></p><p>照着配置就行了都是中文没什么好说的</p>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git commit</title>
      <link href="/2021/11/05/promote/git-commit/"/>
      <url>/2021/11/05/promote/git-commit/</url>
      
        <content type="html"><![CDATA[<p>git commit 格式</p><h1 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h1><ul><li>feat - 新功能（feature）</li><li>fix - 修补bug</li><li>docs - 文档（documentation）</li><li>style - 格式（不影响代码运行的变动）</li><li>test - 增加测试</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>chore - 构建过程或辅助工具的变动</li><li>revert - 撤销</li><li>close - 关闭 issue</li><li>clean -清理</li></ul><p>labels 规则</p><ul><li>invalid - 未定义, 内容 不规范</li><li>need demo - 需要提供预览链接 </li><li>need update - 需要更新修复问题</li><li>bug - bug</li><li>duplicate - 重复</li><li>enhancement - 新功能</li><li>question - 提问</li><li>wontfix - 不修复的问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>配置终端代理</title>
      <link href="/2021/11/03/configure/term-Proxy/"/>
      <url>/2021/11/03/configure/term-Proxy/</url>
      
        <content type="html"><![CDATA[<p>配置终端翻墙</p><h1 id="终端翻墙"><a href="#终端翻墙" class="headerlink" title="终端翻墙"></a>终端翻墙</h1><h3 id="1-privoxy-安装"><a href="#1-privoxy-安装" class="headerlink" title="1.privoxy 安装"></a>1.privoxy 安装</h3><pre><code class="bash">$ brew install privoxy</code></pre><h3 id="2-privoxy-配置"><a href="#2-privoxy-配置" class="headerlink" title="2.privoxy 配置"></a>2.privoxy 配置</h3><p>打开配置文件 /usr/local/etc/privoxy/config ：<br>加入下面两项配置：</p><pre><code class="bash">$ listen-address 0.0.0.0:8118$ forward-socks5 / localhost:1086 .</code></pre><blockquote><ul><li>第一行设置 privoxy 监听任意IP地址的8118端口。</li><li>第二行设置本地socks5代理客户端端口。</li><li>注意不要忘了最后有一个空格和点号。</li></ul></blockquote><h3 id="3-启动-privoxy"><a href="#3-启动-privoxy" class="headerlink" title="3.启动 privoxy"></a>3.启动 privoxy</h3><pre><code class="bash">$ sudo /usr/local/sbin/privoxy /usr/local/etc/privoxy/config</code></pre><h3 id="4-查看是否启动成功"><a href="#4-查看是否启动成功" class="headerlink" title="4.查看是否启动成功"></a>4.查看是否启动成功</h3><pre><code class="bash">$ netstat -na | grep 8118</code></pre><h3 id="5-privoxy-使用"><a href="#5-privoxy-使用" class="headerlink" title="5.privoxy 使用"></a>5.privoxy 使用</h3><p>在命令行终端输入如下命令，该终端即可翻墙：</p><pre><code class="bash">$ export http_proxy=&#39;http://localhost:8118&#39;$ export https_proxy=&#39;http://localhost:8118&#39;</code></pre><p>原理是将 socks5 代理转化成 http 代理给命令行终端使用。<br>如果不想使用了取消即可。</p><pre><code class="bash">$ unset http_proxy$ unset https_proxy</code></pre><h3 id="6-小技巧"><a href="#6-小技巧" class="headerlink" title="6.小技巧"></a>6.小技巧</h3><p>如果关闭了终端，功能就会失效，如果需要代理一直生效，则可以把上述两行代码添加到 ~/.bash_profile 文件最后。</p><pre><code class="bash">function proxy_off()&#123;    unset http_proxy    unset https_proxy    echo -e &quot;已关闭代理&quot;&#125;function proxy_on() &#123;    export no_proxy=&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;    export http_proxy=&quot;http://127.0.0.1:8118&quot;    export https_proxy=$http_proxy    echo -e &quot;已开启代理&quot;&#125;</code></pre><h3 id="7-小技巧"><a href="#7-小技巧" class="headerlink" title="7.小技巧"></a>7.小技巧</h3><p>测试是否成功</p><pre><code class="bash">$ curl https://www.google.com/</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
