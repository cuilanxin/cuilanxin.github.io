<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React-ts</title>
      <link href="/2022/01/24/configure/react-ts/"/>
      <url>/2022/01/24/configure/react-ts/</url>
      
        <content type="html"><![CDATA[<p>配置 React + ts</p><h1 id="搭建基础-react-项目"><a href="#搭建基础-react-项目" class="headerlink" title="搭建基础 react 项目"></a>搭建基础 react 项目</h1><pre><code class="bash">$ npx create-react-app demo</code></pre><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><pre><code class="bash">$  yarn add @typescript-eslint/eslint-plugin --dev$  yarn add @typescript-eslint/parser --dev$  yarn add eslint --dev$  yarn add eslint-config-alloy --dev$  yarn add eslint-loader --dev$  yarn add eslint-plugin-react --dev$  yarn add eslint-plugin-prettier --dev$  yarn add prettier --dev$  yarn add husky --dev</code></pre><h1 id="配置eslint-在项目根目录创建-eslintrc-json-文件"><a href="#配置eslint-在项目根目录创建-eslintrc-json-文件" class="headerlink" title="配置eslint 在项目根目录创建 .eslintrc.json 文件"></a>配置eslint 在项目根目录创建 .eslintrc.json 文件</h1><ol><li>这个是我配置的，也可以在rules自行配置</li><li><a href="https://eslint.bootcss.com/docs/user-guide/configuring">eslint 中文网</a></li></ol><pre><code class="json">&#123;  &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;,  &quot;plugins&quot;: [      &quot;@typescript-eslint/eslint-plugin&quot;  ],  &quot;extends&quot;: [      &quot;alloy&quot;,      &quot;alloy/react&quot;,      &quot;alloy/typescript&quot;  ],  &quot;settings&quot;: &#123;      &quot;react&quot;: &#123;          &quot;version&quot;: &quot;detect&quot;      &#125;  &#125;,  &quot;rules&quot;: &#123;    &quot;no-console&quot;: &quot;error&quot;,    &quot;max-len&quot;: [&quot;error&quot;, 130],    &quot;max-lines&quot;: [&quot;error&quot;, 500],    &quot;indent&quot;: [&quot;error&quot;, 2],    &quot;max-depth&quot;: [&quot;error&quot;, 3],    &quot;no-unused-vars&quot;: &quot;error&quot;,    &quot;no-param-reassign&quot;: &quot;error&quot;,    &quot;no-multiple-empty-lines&quot;: &quot;error&quot;  &#125;&#125;</code></pre><h1 id="配置-prettier-在根目录创建-prettierrc-json-文件"><a href="#配置-prettier-在根目录创建-prettierrc-json-文件" class="headerlink" title="配置 prettier 在根目录创建 .prettierrc.json 文件"></a>配置 prettier 在根目录创建 .prettierrc.json 文件</h1><ol><li>以下是我的配置，可自行配置</li><li><a href="https://prettier.io/docs/en/api.html">prettier 文档</a></li></ol><pre><code class="json">&#123;  &quot;singleQuote&quot;: true,  &quot;trailingComma&quot;: &quot;all&quot;,  &quot;printWidth&quot;: 130,  &quot;overrides&quot;: [    &#123;      &quot;files&quot;: &quot;.prettierrc&quot;,      &quot;options&quot;: &#123; &quot;parser&quot;: &quot;json&quot; &#125;    &#125;  ]&#125;</code></pre><h1 id="配置-husky"><a href="#配置-husky" class="headerlink" title="配置 husky"></a>配置 husky</h1><ol><li><a href="https://typicode.github.io/husky/#/">husky 文档</a><pre><code class="bash">$ npx husky-init &amp;&amp; yarn$ npx husky add .husky/commit-msg &#39;npx --no-install commitlint --edit &quot;$1&quot;&#39;</code></pre></li></ol><h1 id="配置-package-json"><a href="#配置-package-json" class="headerlink" title="配置 package.json"></a>配置 package.json</h1><pre><code class="json">&#123;  &quot;scripts&quot;: &#123;    &quot;lint&quot;: &quot;eslint --ext .ts,.tsx,.js,jsx&quot;,    &quot;lint_fix&quot;: &quot;eslint --ext .ts,.tsx,.js,jsx --fix&quot;,    &quot;prepare&quot;: &quot;husky install&quot;,    &quot;lint-staged&quot;: &quot;lint-staged&quot;  &#125;,  &quot;lint-staged&quot;: &#123;  &quot;*.&#123;js,jsx,ts,tsx,json,less,md&#125;&quot;: [    &quot;eslint --fix&quot;,    &quot;git add&quot;  ],  &quot;*.&#123;js,jsx,ts,tsx,less,json&#125;&quot;: [    &quot;prettier --write&quot;  ]&#125;,&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Flutter</title>
      <link href="/2022/01/24/flutter/hellow/"/>
      <url>/2022/01/24/flutter/hellow/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>研究</title>
      <link href="/2022/01/24/research/index/"/>
      <url>/2022/01/24/research/index/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 提升 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 高级类型</title>
      <link href="/2021/12/18/promote/ts--height-types/"/>
      <url>/2021/12/18/promote/ts--height-types/</url>
      
        <content type="html"><![CDATA[<p>TypeScript 高级类型</p><h1 id="typescript-高级类型"><a href="#typescript-高级类型" class="headerlink" title="typescript 高级类型"></a>typescript 高级类型</h1><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript type interface区别</title>
      <link href="/2021/12/18/promote/ts--type-interface%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/12/18/promote/ts--type-interface%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>TypeScript type interface区别</p><h1 id="typescript-type-amp-interface区别"><a href="#typescript-type-amp-interface区别" class="headerlink" title="typescript type &amp; interface区别"></a>typescript type &amp; interface区别</h1><h3 id="官网引文"><a href="#官网引文" class="headerlink" title="官网引文"></a>官网引文</h3><blockquote><p>Type aliases and interfaces are very similar, and in many cases you can choose between them freely. Almost all features of an interface are available in type, the key distinction is that a type cannot be re-opened to add new properties vs an interface which is always extendable.</p><p>百度翻译: 类型别名和接口非常相似，在许多情况下，您可以在它们之间自由选择。接口的几乎所有功能都可以在类型中使用，关键区别在于类型无法重新打开以添加新属性，而接口始终是可扩展的。</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre><code class="ts">interface A &#123;  name: string;&#125;const a: A = &#123; name: &#39;string&#39; &#125;</code></pre><pre><code class="ts">type A = &#123;  name: string;&#125;const a: A = &#123; name: &#39;string&#39; &#125;type B = numberconst b: B = 1;</code></pre><p>**<code style='color: red; opacity: .8'>interface</code> **</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>v2ray 搭建科学上网</title>
      <link href="/2021/11/16/configure/proxy-V2ray/"/>
      <url>/2021/11/16/configure/proxy-V2ray/</url>
      
        <content type="html"><![CDATA[<p>配置科学上网 mac 版</p><h1 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h1><h3 id="1-购买一个服务器"><a href="#1-购买一个服务器" class="headerlink" title="1. 购买一个服务器"></a>1. 购买一个服务器</h3><p><a href="https://racknerd.com/">racknerd 官网</a></p><ol><li>注册账号</li><li>选择适合自己的价位</li><li>选择自己会用的 linux 系统(本文选用 CentOS SELinux 7 x64)</li></ol><h3 id="2-连接服务器"><a href="#2-连接服务器" class="headerlink" title="2. 连接服务器"></a>2. 连接服务器</h3><pre><code class="bash">$ ssh root@服务器IP$ # 输入密码</code></pre><h3 id="3-配置ssr"><a href="#3-配置ssr" class="headerlink" title="3. 配置ssr"></a>3. 配置ssr</h3><p>在进入服务器的终端界面</p><h3 id="4-安装wget"><a href="#4-安装wget" class="headerlink" title="4. 安装wget"></a>4. 安装wget</h3><p>有的不用安装</p><pre><code class="bash">$ sudo yum -y install wget</code></pre><h3 id="5-关闭防火墙"><a href="#5-关闭防火墙" class="headerlink" title="5. 关闭防火墙"></a>5. 关闭防火墙</h3><pre><code class="bash">$ systemctl stop firewalld</code></pre><h3 id="6-安装-v2ray"><a href="#6-安装-v2ray" class="headerlink" title="6. 安装 v2ray"></a>6. 安装 v2ray</h3><pre><code class="bash">$ bash &lt;(curl -s -L https://git.io/v2ray-setup.sh)</code></pre><h3 id="7-v2ray-命令"><a href="#7-v2ray-命令" class="headerlink" title="7. v2ray 命令"></a>7. v2ray 命令</h3><pre><code class="bash">$ v2ray info # 查看 V2Ray 配置信息$ v2ray link # 生成 V2Ray 配置文件链接$ v2ray qr # 生成 V2Ray 配置二维码链接$ v2ray start # 启动 V2Ray$ v2ray stop # 停止 V2Ray$ v2ray restart # 重启 V2Ray$ v2ray config # 配置</code></pre><h3 id="8-下载-ssr-软件"><a href="#8-下载-ssr-软件" class="headerlink" title="8.下载 ssr 软件"></a>8.下载 ssr 软件</h3><p>按照步骤填写服务器信息，就是刚才在买的服务器中搭建的ssr的配置<br><a href="https://github.com/yanue/V2rayU/releases/tag/3.2.0">mac v2rayU</a></p><p>照着配置就行了都是中文没什么好说的</p>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git commit</title>
      <link href="/2021/11/05/promote/git-commit/"/>
      <url>/2021/11/05/promote/git-commit/</url>
      
        <content type="html"><![CDATA[<p>git commit 格式</p><h1 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h1><ul><li>feat - 新功能（feature）</li><li>fix - 修补bug</li><li>docs - 文档（documentation）</li><li>style - 格式（不影响代码运行的变动）</li><li>test - 增加测试</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>chore - 构建过程或辅助工具的变动</li><li>revert - 撤销</li><li>close - 关闭 issue</li><li>clean -清理</li></ul><p>labels 规则</p><ul><li>invalid - 未定义, 内容 不规范</li><li>need demo - 需要提供预览链接 </li><li>need update - 需要更新修复问题</li><li>bug - bug</li><li>duplicate - 重复</li><li>enhancement - 新功能</li><li>question - 提问</li><li>wontfix - 不修复的问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>配置终端代理</title>
      <link href="/2021/11/03/configure/term-Proxy/"/>
      <url>/2021/11/03/configure/term-Proxy/</url>
      
        <content type="html"><![CDATA[<p>配置终端翻墙</p><h1 id="终端翻墙"><a href="#终端翻墙" class="headerlink" title="终端翻墙"></a>终端翻墙</h1><h3 id="1-privoxy-安装"><a href="#1-privoxy-安装" class="headerlink" title="1.privoxy 安装"></a>1.privoxy 安装</h3><pre><code class="bash">$ brew install privoxy</code></pre><h3 id="2-privoxy-配置"><a href="#2-privoxy-配置" class="headerlink" title="2.privoxy 配置"></a>2.privoxy 配置</h3><p>打开配置文件 /usr/local/etc/privoxy/config ：<br>加入下面两项配置：</p><pre><code class="bash">$ listen-address 0.0.0.0:8118$ forward-socks5 / localhost:1086 .</code></pre><blockquote><ul><li>第一行设置 privoxy 监听任意IP地址的8118端口。</li><li>第二行设置本地socks5代理客户端端口。</li><li>注意不要忘了最后有一个空格和点号。</li></ul></blockquote><h3 id="3-启动-privoxy"><a href="#3-启动-privoxy" class="headerlink" title="3.启动 privoxy"></a>3.启动 privoxy</h3><pre><code class="bash">$ sudo /usr/local/sbin/privoxy /usr/local/etc/privoxy/config</code></pre><h3 id="4-查看是否启动成功"><a href="#4-查看是否启动成功" class="headerlink" title="4.查看是否启动成功"></a>4.查看是否启动成功</h3><pre><code class="bash">$ netstat -na | grep 8118</code></pre><h3 id="5-privoxy-使用"><a href="#5-privoxy-使用" class="headerlink" title="5.privoxy 使用"></a>5.privoxy 使用</h3><p>在命令行终端输入如下命令，该终端即可翻墙：</p><pre><code class="bash">$ export http_proxy=&#39;http://localhost:8118&#39;$ export https_proxy=&#39;http://localhost:8118&#39;</code></pre><p>原理是将 socks5 代理转化成 http 代理给命令行终端使用。<br>如果不想使用了取消即可。</p><pre><code class="bash">$ unset http_proxy$ unset https_proxy</code></pre><h3 id="6-小技巧"><a href="#6-小技巧" class="headerlink" title="6.小技巧"></a>6.小技巧</h3><p>如果关闭了终端，功能就会失效，如果需要代理一直生效，则可以把上述两行代码添加到 ~/.bash_profile 文件最后。</p><pre><code class="bash">function proxy_off()&#123;    unset http_proxy    unset https_proxy    echo -e &quot;已关闭代理&quot;&#125;function proxy_on() &#123;    export no_proxy=&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;    export http_proxy=&quot;http://127.0.0.1:8118&quot;    export https_proxy=$http_proxy    echo -e &quot;已开启代理&quot;&#125;</code></pre><h3 id="7-小技巧"><a href="#7-小技巧" class="headerlink" title="7.小技巧"></a>7.小技巧</h3><p>测试是否成功</p><pre><code class="bash">$ curl https://www.google.com/</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>科学上网</title>
      <link href="/2021/11/02/configure/proxy/"/>
      <url>/2021/11/02/configure/proxy/</url>
      
        <content type="html"><![CDATA[<p>配置科学上网 mac 版</p><h1 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h1><h3 id="1-vultr-购买一个服务器"><a href="#1-vultr-购买一个服务器" class="headerlink" title="1.vultr 购买一个服务器"></a>1.vultr 购买一个服务器</h3><p><a href="https://www.vultr.com/">vultr 官网</a></p><ol><li>注册账号</li><li>登录激活账号</li><li>账号充值<br> -. 在页面 Billing </li><li>新建vps服务器</li><li>尽量选择 CentOS 7 X64 因为网上教程多</li><li>点击 Deploy Now</li><li>部署服务器，就是看这个服务器是不是 Running 不是的话点一下</li><li>记下服务器的详细信息 服务器IP、用户名和密码</li></ol><h3 id="2-连接服务器"><a href="#2-连接服务器" class="headerlink" title="2.连接服务器"></a>2.连接服务器</h3><pre><code class="bash">$ ssh root@服务器IP$ # 输入密码</code></pre><h3 id="3-配置ssr"><a href="#3-配置ssr" class="headerlink" title="3.配置ssr"></a>3.配置ssr</h3><p>在进入服务器的终端界面</p><p><strong>1.安装wget</strong></p><pre><code class="bash">$ yum -y install wget</code></pre><p><strong>2.安装ssr</strong></p><pre><code class="bash">$ wget https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod x ssr.sh &amp;&amp; bash ssr.sh</code></pre><p><strong>3.配置 ssr</strong> </p><ol><li>安装</li><li>都是中文不多说了 不知道就默认</li><li>安装好后 要记一下配置信息</li></ol><pre><code class="bash">$ bash ssr.sh</code></pre><h3 id="4-使用-Google-加速"><a href="#4-使用-Google-加速" class="headerlink" title="4.使用 Google 加速"></a>4.使用 Google 加速</h3><pre><code class="bash">$ yum -y install wget$ wget –no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh$ chmod +x bbr.sh$ ./bbr.sh</code></pre><h3 id="5-下载-ssr-软件"><a href="#5-下载-ssr-软件" class="headerlink" title="5.下载 ssr 软件"></a>5.下载 ssr 软件</h3><p>按照步骤填写服务器信息，就是刚才在买的服务器中搭建的ssr的配置<br><a href="https://github.com/shadowsocksr-backup/ShadowsocksX-NG/releases">mac ssr</a></p>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
